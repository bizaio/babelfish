/*******************************************************************************
 * Copyright (C) 2020 Biza Pty Ltd
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Lesser General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *******************************************************************************/
package io.biza.babelfish.interfaces.cdr;

import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.NotNull;
import org.inferred.freebuilder.FreeBuilder;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.biza.babelfish.support.FormatChecker;
import io.swagger.v3.oas.annotations.media.Schema;

@Schema(description = "This is a Paginated CDR Response")
@Valid
@FreeBuilder
@JsonDeserialize(builder = CDRResponse.Builder.class)
abstract class CDRResponsePaginated {

  abstract Builder toBuilder();
  /**
   * Fluent Builder Class Generated by FreeBuilder
   *
   */
  static class Builder extends CDRResponsePaginated_Builder {
  }

  @Schema(description = "The Links Object", required = true)
  @NotNull
  @Valid
  abstract LinksPaginated links();

  @Schema(
      description = "The meta object is used to provide additional information such as second factor authorisation data, traffic management, pagination counts or other purposes that are complementary to the workings of the API.",
      required = true)
  @NotNull
  @Valid
  @JsonProperty("meta")
  abstract MetaPaginated meta();

  @AssertTrue(message = "First and Last Page Detected but Total Pages is >1")
  public boolean isTotalPagesBiggerThanLinks() {
    return (links() != null && links().next() == null && links().prev() == null)
        ? (meta() != null && meta().totalPages() > 1 ? false : true)
        : true;
  }

  @AssertTrue(message = "Last Page URI page parameter should match totalPages")
  public boolean isLastPagePageParamValid() {
    return (links() != null && links().last() != null && meta() != null
        && meta().totalPages() != null)
            ? ((Integer.parseInt(
                FormatChecker.mapifyQueryString(links().last()).get("page")) != meta().totalPages())
                    ? false
                    : true)
            : true;
  }
}
