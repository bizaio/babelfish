/*******************************************************************************
 * Copyright (C) 2020 Biza Pty Ltd
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Lesser General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *******************************************************************************/
package io.biza.babelfish.interfaces.cdr.banking.product;

import java.net.URI;
import java.time.OffsetDateTime;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import org.inferred.freebuilder.FreeBuilder;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.biza.babelfish.converter.cdr.DateTimeStringToOffsetDateTimeConverter;
import io.biza.babelfish.converter.cdr.OffsetDateTimeToDateTimeStringConverter;
import io.biza.babelfish.converter.cdr.UriStringToUriConverter;
import io.biza.babelfish.converter.cdr.UriToUriStringConverter;
import io.biza.babelfish.enumerations.cdr.BankingProductCategory;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * BankingProductV2 
 * This object provides a basic representation of an Australian Banking Product
 *
 */
@Valid
@Schema(description = "An Australian Banking Product", name = "BankingProduct")
@FreeBuilder
@JsonDeserialize(builder = BankingProductV1.Builder.class)
public interface BankingProductV1 {
  
  /**
   * Fluent Builder Class
   * Generated by FreeBuilder
   *
   */
  class Builder extends BankingProductV1_Builder {}
  
  /**
   * Get a data holder specific unique identifier for this product. This identifier must be unique to a
   * product but does not otherwise need to adhere to ID permanence guidelines.
   * 
   * @return String containing Product Identifier
   */
  @Schema(
      description = "A data holder specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.",
      required = true)
  @NotNull
  @JsonProperty("productId")
  public String productId();

  /**
   * Get the date and time from which this product is effective (ie. is available for origination). Used
   * to enable the articulation of products to the regime before they are available for customers to
   * originate
   * 
   * @return an OffsetDateTime containing when the product is effective from
   */
  @Schema(
      description = "The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate",
      type = "string", format = "date-time")
  @JsonSerialize(converter = OffsetDateTimeToDateTimeStringConverter.class)
  @JsonDeserialize(converter = DateTimeStringToOffsetDateTimeConverter.class)
  @JsonProperty("effectiveFrom")
  public OffsetDateTime effectiveFrom();

  /**
   * Get the date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products
   * @return an OffsetDateTime of when the product is effective until
   */
  @Schema(
      description = "The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products",
      type = "string", format = "date-time")
  @JsonSerialize(converter = OffsetDateTimeToDateTimeStringConverter.class)
  @JsonDeserialize(converter = DateTimeStringToOffsetDateTimeConverter.class)
  @JsonProperty("effectiveTo")
  public OffsetDateTime effectiveTo();
    
  /**
   * Get the last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)
   * @return OffsetDateTime containing last updated time
   */
  @Schema(
      description = "The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)",
      required = true, type = "string", format = "date-time")
  @NotNull
  @JsonSerialize(converter = OffsetDateTimeToDateTimeStringConverter.class)
  @JsonDeserialize(converter = DateTimeStringToOffsetDateTimeConverter.class)
  @JsonProperty("lastUpdated")
  public OffsetDateTime lastUpdated();
  
  /**
   * Get the category to which a product or account belongs. 
   * @return a BankingProductCategory enumeration value
   */
  @Schema(description = "The category to which a product or account belongs.", required = true)
  @NotNull
  @JsonProperty("productCategory")
  public BankingProductCategory productCategory();
  
  /**
   * Get the display name for the product
   * @return String containing the display name
   */
  @Schema(description = "The display name of the product", required = true)
  @NotNull
  @JsonProperty("name")
  public String name();
  
  /**
   * Get a basic description of the product
   * @return a string containing a description of the product
   */
  @Schema(description = "A description of the product", required = true)
  @NotNull
  @JsonProperty("description")
  public String description();
  
  /**
   * A label of the brand for the product. Able to be used for filtering. For data holders with single brands this value is still required
   * @return a String containing the label of the brand
   */
  @Schema(
      description = "A label of the brand for the product. Able to be used for filtering. For data holders with single brands this value is still required",
      required = true)
  @NotNull
  @JsonProperty("brand")
  public String brand();
  
  /**
   * An optional display name of the brand
   * @return the display name of the brand
   */
  @Schema(description = "An optional display name of the brand")
  @JsonProperty("brandName")
  public String brandName();
  
  /**
   * Get the link to an application web page where this product can be applied for.
   * @return a URI containing the Application web page address
   */
  @Schema(description = "A link to an application web page where this product can be applied for.",
      type = "string", format = "uri")
  @JsonSerialize(converter = UriToUriStringConverter.class)
  @JsonDeserialize(converter = UriStringToUriConverter.class)
  @JsonProperty("applicationUri")
  public URI applicationUri();
  
  /**
   * Get whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable
   * @return Boolean of whether the product is specifically tailored
   */
  @Schema(
      description = "Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable",
      required = true)
  @NotNull
  @JsonProperty("isTailored")
  public Boolean isTailored();
  
  /**
   * Get additional information for a banking product
   * @return a BankingProductAdditionalInformationV1 sub object
   */
  @Schema(description = "Additional Information for Banking Product")
  @JsonProperty("additionalInformation")
  @Valid
  public BankingProductAdditionalInformationV1 additionalInformation();
  
}
